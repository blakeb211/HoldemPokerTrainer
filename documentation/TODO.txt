
+Use ConfigurationManager to create an app.config to hold database connection string and other strings the program uses.

+Get the test suite working and use the Hand(string x) constructor
+Get preflop and postflop statistics working
DONE +get simulator working with the new database setup
+CheckDatabaseInit status does not detect partially created databases
+Make one line functions into lambda expressions for readability
DONE +Add a Unique Index on Column 1 

NEW TIMINGS

Database Initialization Timing
- 1.32 minutes to build tables (no indexes)
- 1.52 minutes to build tables (with index on each table) -- size is now 674 MB (293 MB zipped)
- 800,000 records in 0.7625 minutes
- 1,200,000 in 1.044 minutes ~= 1,000,000 records per minute
- 1,200,000 in 0.639 minutes ~= 1,870,000 records per minute (played with thread priorities)
- 4,000,000 in 1.27 minutes ~= 3,000,000 records per minute 

hole card combo to its own table and use prime number dictionary for faster lookups
		Compress data by encoding it as integers (1 - 52 for each card and 1 or 0 for true or false)
		Speed up hand evaluator - 2598960 unique 5 cards -- use dictionaries ==> (now PokerLib.dll)


CHANGED WINFLAG TO INTEGER
104016 records = C * 5544 kilobytes
C = 18.76 records per kilobyte

4,000,000,000 / 18.76 / 1024 / 1024 = 200 Gigabytes for 4 billion records

60,000 record took 1.21 minutes

60,000 = C2 * 1.21 minutes
    C2 = 49,586 records per minute

4,000,000,000 / 49,586 = 80,667 minutes == 56 days

REMOVED TURN AND RIVER FROM DATABASE RECORDS
DROP INDEX BEFORE SIMULATING GAMES

200,004 = C2 * 3.5 minutes
C2 = 57,142 records per minute

200,004 = C1 * 8728 kilobytes
C1 = 22.91 records per kilobyte

4,000,000,000 / 57,142 / 60 / 24  = 48 days to simulate target
4,000,000,000 / 8728 / 1024 / 1024 = 166 Gigabytes to store target database

REMOVED REDUNDANT COMPARISONS BEING DONE IN FIND_BEST_HAND METHOD

disk i/o appears to be the limiting factor??

80000 records = C2 * 1.09 minutes
C2 = 73,394 records per minute

4,000,000,000 / 73,394 / 60 / 24  = 37 days to simulate target

BATCHED TO NOW DO 1500 RECORDS PER TRANSACTION
4,000,000,000 / 523,000 / 60 / 24  = 5.82 days to simulate target
4,000,000,000 / 8728 / 1024 / 1024 = 166 Gigabytes to store target database

200400 = C1 * 8748 kilobytes
C1 = 22.91 records per kilobyte

204000 records in 0.32 min = 637,500 records per minute == 4.35 DAYS TO TARGET

TURNED JOURNAL MODE OFF, CHANGED HOLE CARDS AND FLOP CARDS TO INTEGERS, DONT CREATE INDEX

2,004,000 records in 3.12 minutes are 35,072KB

records per minute = 642,307 records per minute == 103 hours to target
records per kilobyte = 57.139 == 67 Gigabytes for target file size

// UPDATED SORTING METHOD TO SORT THE HAND ITS CALLED ON SO THAT NOTHING GETS SORTED TWICE

204000 records in 0.24 minutes
804000 records in 0.98 minutes = 820,408 records per minute


// UPDATED ONE PAIR COMPARISON SECTION IN DoesThisHandBeatThatHand TO USE THE 
// CACTUS KEV PRIME NUMBER RANKING AND A HASH
240000 records in 0.29 min  = 827,586 records per minute


// August 31, 2019
// Added 2nd Record Producer thread using Producer-Consumer Model
// Turned SYNCHRONOUS=Off for SQLite database
// 1000 records per transaction
800000 in 0.83 minutes (Wall time) = 963, 855 records per minute

// Next up: Replaces lists with arrays where possible
//			Repalce foreach with for loops where possible